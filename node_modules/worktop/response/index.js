// packages/worktop/src/response.ts
const { byteLength:p } = require('worktop/utils');
var d = "content-type", o = "content-length", y = {
  "400": "Bad Request",
  "401": "Unauthorized",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "413": "Payload Too Large",
  "422": "Unprocessable Entity",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout"
};
function u(e, t, s) {
  let r = {};
  for (let a in s)
    r[a.toLowerCase()] = s[a];
  let n = r[d], i = typeof t;
  return t == null ? t = "" : i === "object" ? (t = JSON.stringify(t), n = n || "application/json;charset=utf-8") : i !== "string" && (t = String(t)), r[d] = n || "text/plain", r[o] = r[o] || String(t.byteLength || p(t)), new Response(t, { status: e, headers: r });
}
var f = /* @__PURE__ */ new Set([101, 204, 205, 304]);
function b(e, t) {
  let s = f.has(e.status);
  if (!t && !s)
    return e;
  let r = new Response(null, e);
  return s && r.headers.delete(o), e.status === 205 && r.headers.set(o, "0"), r;
}
function h() {
  var e = this, t = e.headers = new Headers({
    "Cache-Control": "private, no-cache"
  });
  return e.body = "", e.finished = !1, e.status = e.statusCode = 200, e.getHeaders = () => Object.fromEntries(t), e.getHeaderNames = () => [...t.keys()], e.hasHeader = t.has.bind(t), e.getHeader = t.get.bind(t), e.removeHeader = t.delete.bind(t), e.setHeader = t.set.bind(t), Object.defineProperty(e, "status", {
    set: (s) => {
      e.statusCode = s;
    },
    get: () => e.statusCode
  }), e.end = (s) => {
    e.finished || (e.finished = !0, e.body = s);
  }, e.writeHead = (s, r) => {
    e.statusCode = s;
    for (let n in r)
      t.set(n, r[n]);
  }, e.send = (s, r, n) => {
    let i, a, l = u(s, r, {
      [o]: e.getHeader(o),
      [d]: e.getHeader(d),
      ...n
    });
    for ([i, a] of l.headers)
      t.set(i, a);
    e.statusCode = l.status, e.end(l.body);
  }, e;
}


exports.STATUS_CODES = y;
exports.ServerResponse = h;
exports.finalize = b;
exports.reply = u;