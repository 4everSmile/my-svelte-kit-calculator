// packages/worktop/src/buffer.ts
const { base64url:B, decode:i, encode:p } = require('worktop/base64');
function n(t) {
  let e = 0, r = t.length, f = new Uint8Array(r);
  for (; e < r; e++)
    f[e] = t.charCodeAt(e);
  return f;
}
function o(t) {
  return String.fromCharCode.apply(null, new Uint8Array(t));
}
var d = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
function u(t) {
  let e = 0, r = "", f = new Uint8Array(t);
  for (; e < f.length; e++)
    r += d[f[e]];
  return r;
}
function s(t) {
  let e = 0, r = t.length, f = [];
  for (r & 1 && (t += "0", r++); e < r; e += 2)
    f.push(parseInt(t[e] + t[e + 1], 16));
  return new Uint8Array(f);
}
var b = /* @__PURE__ */ new TextEncoder(), c = (t) => b.encode(t), l = /* @__PURE__ */ new TextDecoder("utf-8"), y = (t) => l.decode(t);
function w(t) {
  let e = 0, r = "";
  for (; e < t.length; e++)
    r += String.fromCharCode(t[e] & 127);
  return r;
}
function E(t) {
  let e = t.replace(/^-----BEGIN .+ KEY-----/, "");
  return n(i(e.replace(/-----END .+ KEY-----$/, "")));
}
var g = {
  ascii: "binary",
  latin1: "binary",
  base64url: "base64",
  "ucs-2": "utf16le",
  ucs2: "utf16le",
  "utf-8": "utf8"
};
function A(t, e = "utf8") {
  let r;
  if (t.length < 1)
    r = new Uint8Array(0);
  else if (e = g[e] || e, e === "utf8")
    r = c(t);
  else if (e === "hex")
    r = s(t);
  else if (e === "binary")
    r = n(t);
  else if (e === "base64")
    r = n(i(t));
  else if (e === "utf16le") {
    let f = 0, a = c(t);
    for (r = new Uint8Array(a.length * 2); f < a.length; f++)
      r[f * 2] = a[f];
  } else
    throw new Error(`Unknown encoding: ${e}`);
  return r.toString = function(f = "utf8") {
    if (f = f.replace("-", ""), f === "hex")
      return u(r);
    if (f === "utf8")
      return y(r);
    if (f === "ascii")
      return w(r);
    if (f === "binary" || f === "latin1")
      return o(r);
    if (f === "utf16le" || f === "ucs2")
      return new TextDecoder("utf-16le").decode(r);
    if (f === "base64url")
      return B(o(r));
    if (f === "base64")
      return p(o(r));
    throw new Error(`Unknown encoding: ${f}`);
  }, r;
}


exports.Encoder = b;
exports.HEX = d;
exports.asBinary = n;
exports.asHEX = s;
exports.asPEM = E;
exports.asUTF8 = c;
exports.decode = o;
exports.encode = n;
exports.from = A;
exports.toASCII = w;
exports.toBinary = o;
exports.toHEX = u;
exports.toUTF8 = y;