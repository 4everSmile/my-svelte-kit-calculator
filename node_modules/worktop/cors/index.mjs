// packages/worktop/src/cors.ts
var a = {
  origin: "*",
  methods: ["GET", "HEAD", "PUT", "PATCH", "POST", "DELETE"],
  headers: [],
  expose: []
};
function l(e, n) {
  let r = n ? { ...a, ...n } : a;
  return e.headers.set("Access-Control-Allow-Origin", r.origin), r.origin !== "*" && e.headers.append("Vary", "Origin"), r.credentials && e.headers.set("Access-Control-Allow-Credentials", "true"), r.expose.length && e.headers.set("Access-Control-Expose-Headers", r.expose), r;
}
function g(e = {}) {
  return function(n, r) {
    let t = e.origin || "*", o;
    if (typeof t != "string" && (o = n.headers.get("Origin") || "", t = t === !0 && o || t instanceof RegExp && t.test(o) && o || "false"), n.method === "OPTIONS") {
      let s = new Response(null, { status: 204 }), i = l(s, { ...e, origin: t });
      return i.headers.length ? s.headers.set("Access-Control-Allow-Headers", i.headers) : (o = n.headers.get("Access-Control-Request-Headers"), o && s.headers.set("Access-Control-Allow-Headers", o), s.headers.append("Vary", "Access-Control-Request-Headers")), i.maxage != null && s.headers.set("Access-Control-Max-Age", i.maxage), i.methods.length && s.headers.set("Access-Control-Allow-Methods", i.methods), s;
    }
    r.defer((s) => {
      e.origin = t, l(s, e);
    });
  };
}
export {
  a as config,
  l as headers,
  g as preflight
};
