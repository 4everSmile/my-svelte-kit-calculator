var c = Object.defineProperty;
var a = (r, e, t) => e in r ? c(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var i = (r, e, t) => (a(r, typeof e != "symbol" ? e + "" : e, t), t);

// packages/worktop/src/cfw.durable.ts
import { connect as u } from "worktop/ws";
var p = class {
  constructor(e, t) {
    i(this, "DEBUG");
    this.setup && e.blockConcurrencyWhile(() => this.setup(e, t)), this.DEBUG = !1;
  }
  async connect(e) {
    let t = u(e);
    if (t)
      return t;
    let { 0: o, 1: s } = new WebSocketPair();
    s.accept();
    function n() {
      s.close();
    }
    return s.addEventListener("close", n), s.addEventListener("error", n), this.onconnect && await this.onconnect(e, s), new Response(null, {
      status: 101,
      statusText: "Switching Protocols",
      webSocket: o
    });
  }
  async fetch(e, t) {
    try {
      let o = new Request(e, t);
      return await this.receive(o);
    } catch (o) {
      let s = this.DEBUG && o.stack;
      return new Response(s || "Error with receive", { status: 400 });
    }
  }
};
export {
  p as Actor
};
