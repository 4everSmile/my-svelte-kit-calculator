// src/worker.js
import { Server } from "SERVER";
import { manifest, prerendered } from "MANIFEST";

// ../../node_modules/.pnpm/worktop@0.8.0-next.12/node_modules/worktop/cache/index.mjs
async function o(n2, e) {
  let t = typeof e != "string" && e.method === "HEAD";
  t && (e = new Request(e, { method: "GET" }));
  let a = await n2.match(e);
  return t && a && (a = new Response(null, a)), a;
}
function r(n2, e, t, a) {
  return (typeof e == "string" || e.method === "GET") && f(t) && (t.headers.has("Set-Cookie") && (t = new Response(t.body, t), t.headers.append("Cache-Control", "private=Set-Cookie")), a.waitUntil(n2.put(e, t.clone()))), t;
}
function f(n2) {
  if (n2.status === 101 || n2.status === 206 || ~(n2.headers.get("Vary") || "").indexOf("*"))
    return false;
  let t = n2.headers.get("Cache-Control") || "";
  return !/(private|no-cache|no-store)/i.test(t);
}

// ../../node_modules/.pnpm/worktop@0.8.0-next.12/node_modules/worktop/cfw.cache/index.mjs
var o2 = caches.default;
var s = /* @__PURE__ */ r.bind(0, o2);
var n = /* @__PURE__ */ o.bind(0, o2);

// src/worker.js
var server = new Server(manifest);
var prefix = `/${manifest.appDir}/`;
var worker = {
  async fetch(req, env, context) {
    try {
      let res = await n(req);
      if (res)
        return res;
      let { pathname } = new URL(req.url);
      if (pathname.startsWith(prefix)) {
        res = await env.ASSETS.fetch(req);
        res = new Response(res.body, {
          headers: {
            "cache-control": "public, immutable, max-age=31536000",
            "content-type": res.headers.get("content-type"),
            "x-robots-tag": "noindex"
          }
        });
      } else {
        pathname = pathname.replace(/\/$/, "") || "/";
        let file = pathname.substring(1);
        try {
          file = decodeURIComponent(file);
        } catch (err) {
        }
        if (manifest.assets.has(file) || manifest.assets.has(file + "/index.html") || prerendered.has(pathname)) {
          res = await env.ASSETS.fetch(req);
        } else {
          res = await server.respond(req, {
            platform: { env, context },
            getClientAddress() {
              return req.headers.get("cf-connecting-ip");
            }
          });
        }
      }
      return s(req, res, context);
    } catch (e) {
      return new Response("Error rendering route: " + (e.message || e.toString()), { status: 500 });
    }
  }
};
var worker_default = worker;
export {
  worker_default as default
};
